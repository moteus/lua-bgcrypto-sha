local sha1       = require "bgcrypto.sha1"
local sha256     = require "bgcrypto.sha256"
local derive_key = require "bgcrypto.pbkdf2"

local function H(t, b, e)
  local str = ''
  for i = b or 1, e or #t do
    str = str .. (string.char(t[i]))
  end
  return str
end

local function test_derive_key()
  -- WinZIP compatiable
  local PWD_VER_LENGTH    = 2
  local KEYING_ITERATIONS = 1000

  local pwd  = string.rep("1234567890", 5)
  local salt = H{0xbe,0xda,0x8e,0x77,0x4b,0x16,0x8f,0xfb,0xa8,0xaf,0xf3,0x4f,0x2d,0x4e,0xfe,0xd0}
  local iter = KEYING_ITERATIONS
  local key_len = 2 * 32 + PWD_VER_LENGTH
  local etalon = {55, 74, 210, 155, 79, 239, 111, 112, 82, 186, 90, 155, 
    224, 195, 16, 86, 32, 162, 64, 248, 69, 143, 236, 80, 91, 243, 244,
    23, 63, 102, 65, 87, 33, 19, 240, 36, 236, 133, 57, 18, 60, 126, 75,
    201, 248, 211, 41, 218, 97, 17, 122, 236, 162, 141, 80, 207, 168, 15,
    148, 170, 132, 145, 126, 11, 153, 63
  }

  local key = derive_key(sha1, pwd, salt, iter, key_len)
  assert(key == H(etalon))
end

local function test_derive_key_rfc0670()

  local TESTS = {
    -- SHA 1
    { P = "password", S = "salt", c = 1, len = 20, hash = sha1,
      DK = H{
        0x0c, 0x60, 0xc8, 0x0f, 0x96, 0x1f, 0x0e, 0x71,
        0xf3, 0xa9, 0xb5, 0x24, 0xaf, 0x60, 0x12, 0x06,
        0x2f, 0xe0, 0x37, 0xa6
      }
    },
    { P = "password", S = "salt", c = 2, len = 20, hash = sha1,
      DK = H{
        0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c,
        0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0,
        0xd8, 0xde, 0x89, 0x57
      }
    },
    { P = "password", S = "salt", c = 4096, len = 20, hash = sha1,
      DK = H{
        0x4b, 0x00, 0x79, 0x01, 0xb7, 0x65, 0x48, 0x9a,
        0xbe, 0xad, 0x49, 0xd9, 0x26, 0xf7, 0x21, 0xd0,
        0x65, 0xa4, 0x29, 0xc1
      }
    },
    --[[ Very slow
    { P = "password", S = "salt", c = 16777216, len = 20, hash = sha1,
      DK = H{
        0xee, 0xfe, 0x3d, 0x61, 0xcd, 0x4d, 0xa4, 0xe4,
        0xe9, 0x94, 0x5b, 0x3d, 0x6b, 0xa2, 0x15, 0x8c,
        0x26, 0x34, 0xe9, 0x84
      }
    }, --]]
    { P = "passwordPASSWORDpassword", S = "saltSALTsaltSALTsaltSALTsaltSALTsalt", c = 4096, len = 25, hash = sha1,
      DK = H{
        0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b,
        0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a,
        0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70,
        0x38
      }
    },
    { P = "pass\0word", S = "sa\0lt", c = 4096, len = 16, hash = sha1,
      DK = H{
        0x56, 0xfa, 0x6a, 0xa7, 0x55, 0x48, 0x09, 0x9d,
        0xcc, 0x37, 0xd7, 0xf0, 0x34, 0x25, 0xe0, 0xc3,
      }
    },

    -- SHA 256 (http://stackoverflow.com/questions/5130513/pbkdf2-hmac-sha2-test-vectors)
    { P = "password", S = "salt", c = 1, len = 32, hash = sha256,
      DK = H{
        0x12, 0x0f, 0xb6, 0xcf, 0xfc, 0xf8, 0xb3, 0x2c,
        0x43, 0xe7, 0x22, 0x52, 0x56, 0xc4, 0xf8, 0x37,
        0xa8, 0x65, 0x48, 0xc9, 0x2c, 0xcc, 0x35, 0x48,
        0x08, 0x05, 0x98, 0x7c, 0xb7, 0x0b, 0xe1, 0x7b,
      }
    },
    { P = "password", S = "salt", c = 2, len = 32, hash = sha256,
      DK = H{
       0xae, 0x4d, 0x0c, 0x95, 0xaf, 0x6b, 0x46, 0xd3,
       0x2d, 0x0a, 0xdf, 0xf9, 0x28, 0xf0, 0x6d, 0xd0,
       0x2a, 0x30, 0x3f, 0x8e, 0xf3, 0xc2, 0x51, 0xdf,
       0xd6, 0xe2, 0xd8, 0x5a, 0x95, 0x47, 0x4c, 0x43,
      }
    },
    { P = "password", S = "salt", c = 4096, len = 32, hash = sha256,
      DK = H{
        0xc5, 0xe4, 0x78, 0xd5, 0x92, 0x88, 0xc8, 0x41,
        0xaa, 0x53, 0x0d, 0xb6, 0x84, 0x5c, 0x4c, 0x8d,
        0x96, 0x28, 0x93, 0xa0, 0x01, 0xce, 0x4e, 0x11,
        0xa4, 0x96, 0x38, 0x73, 0xaa, 0x98, 0x13, 0x4a,
      }
    },
    --[[ Very slow
    { P = "password", S = "salt", c = 16777216, len = 32, hash = sha256,
      DK = H{
        0xcf, 0x81, 0xc6, 0x6f, 0xe8, 0xcf, 0xc0, 0x4d,
        0x1f, 0x31, 0xec, 0xb6, 0x5d, 0xab, 0x40, 0x89,
        0xf7, 0xf1, 0x79, 0xe8, 0x9b, 0x3b, 0x0b, 0xcb,
        0x17, 0xad, 0x10, 0xe3, 0xac, 0x6e, 0xba, 0x46,
      }
    }, --]]
    { P = "passwordPASSWORDpassword", S = "saltSALTsaltSALTsaltSALTsaltSALTsalt", c = 4096, len = 40, hash = sha256,
      DK = H{
        0x34, 0x8c, 0x89, 0xdb, 0xcb, 0xd3, 0x2b, 0x2f,
        0x32, 0xd8, 0x14, 0xb8, 0x11, 0x6e, 0x84, 0xcf,
        0x2b, 0x17, 0x34, 0x7e, 0xbc, 0x18, 0x00, 0x18,
        0x1c, 0x4e, 0x2a, 0x1f, 0xb8, 0xdd, 0x53, 0xe1,
        0xc6, 0x35, 0x51, 0x8c, 0x7d, 0xac, 0x47, 0xe9,
      }
    },
    { P = "pass\0word", S = "sa\0lt", c = 4096, len = 16, hash = sha256,
      DK = H{
        0x89, 0xb6, 0x9d, 0x05, 0x16, 0xf8, 0x29, 0x89,
        0x3c, 0x69, 0x62, 0x26, 0x65, 0x0a, 0x86, 0x87,
      }
    },
  }

  for _, test in ipairs(TESTS) do
    local key = derive_key(test.hash, test.P, test.S, test.c, test.len)
    assert(test.DK == key)

    local key = test.hash.pbkdf2(test.P, test.S, test.c, test.len)
    assert(test.DK == key)
  end

end

test_derive_key()

test_derive_key_rfc0670()


